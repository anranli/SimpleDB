Anran Li, cs186-mz
Jhoong Roh, cs186-[]

1. 
Parser.main()
	- Entry point for SimpleDB. It creates a Parser and calls Parser.start().
Parser.start()
	- Calls Database.getCatalog().loadSchema(argv[0]) which loads the database depending on the user defined argument. 
	- Calls TableStats.computeStatistics(), which iterates over the table ids and creates a new TableStats that corresponds to each table id and remembers it in a map.
	- Then, there are a lot of code for handling arguments and splitting/parsing the input query.
	- Calls processNextStatement() with the input as a ByteStream.
Parser.processNextStatement()
	- Creats a ZStatement from parsing the input.
	- Creates a new Transaction and calls start() on the Transaction.
	- Handles the ZStatement depending on if it is an instance of ZInsert, ZDelete, or ZQuery by calling handleInsertStatement(), handleDeleteStatement(), or handleQueryStatement().
	- If the query is not null, the query is executed by calling query.execute().
Parser.handleQueryStatement()
	- Creates a new Query using the TransactionId input.
	- Creates a new LogicalPlan by calling parseQueryLogicalPlan() with the ZQuery and TransactionId inputs.
	- Creates a new physical plan by calling LogicalPlan.physicalPlan() using the TableStats mapping that was created in TableStats.computeStatics() of Parser.start().
	- If the physical plan is not null, then a Method is created and calls invoke() to help display the query plan visually.
Parser.parseQueryLogicalPlan()
	- Creates a new LogicalPlan and calls setQuery() with the input Query
	- Scans the table in the FROM clause. Calls LogicalPlan.addScan().
	- Parse the WHERE clause, creating Filters and Joins where needed in processExpression(). Calls LogicalPlan.addJoin() and/or LogicalPlan.addFilter().
	- Look for GROUP BY field and verify valid syntax. Calls LogicalPlan.addProjectField().
	- Look through the SELECT field to verify valid syntax and note aggregates. Calls LogicalPlan.addAggregate().
	- Look for ORDER BY field and verify valid syntax. Calls LogicalPlan.addOrderBy().
	- Return the LogicalPlan
Parser.processExpression()
	- Recurisively calls processExpression() if input operators contain AND
	- Check for other valid/supported syntax
	- Calculates if a join is needed
	- If a left operation is a query, then a virtual table is generated
	- If a right operation is a query, then parseQueryLogicalPlan() is called again to parse that query
	- If a join is not needed, then a filter is needed
LogicalPlan.addScan()
	- Adds a scan node for each alias of table accessed by the LogicalPlan.
LogicalPlan.addJoin()
	- Adds a join between a field and a subquery or 2 fields of 2 different tables by creating new LogicalSubplanJoinNodes or LogicalJoinNodes.
LogicalPlan.addFilter()
	- Adds a new filter to the LogicalPlan by creating a new LogicalFilterNode and adding it.
LogicalPlan.addProjectField()
	- Add field/aggregate combinations select list of query by creating a new LogicalSelectListNode and adding it to the select list.
LogicalPlan.addAggregate()
	- Set aggregate fields to input.
LogicalPlan.addOrderBy()
	- Set order by fields to input.
LogicalPlan.physicalPlan()
	- Converts LogicalPlan into a physical plan (DBIterator)
	- Creates several maps for equivilence, filter selectivities, and stats
	- Iterate over the table tuples (scan) and put appropriate elements/calculations into subplan, stats, and filter selectivities maps.
	- Do the same as above but for filters
	- Create a JoinOptimizer and iterate over the joins. Create 2 plans, one for subquery joins or and one of joins between 2 different tables. Call JoinOptimizer.instantiateJoin() and use other variables to determine the subplan and add it to the map.
	- Iterate over the select list, look for aggregate operations, and determine the order of projecting output fields and types by saving it to local lists.
	- Create new Aggregate and new OrderBy with appropiate parameters from input.
Query.execute()
	- The output query is just printed and returned (whose properties were set during handleQueryStatement()).


6. 


[Explain API changes/decisions here] There's no changes to the API.

There's no missing/incomplete parts of our code.

We spent a total of [ ] hours on the project.
One difficult part was exercise 1. It's kind of hard understanding what to do if we work with the entire project at the start of the project. Also, there should be clearer instructions on what methods you want to be explained and how much detail is needed. [Add more difficult parts here]